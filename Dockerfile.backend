# ========================================
# Backend Dockerfile - Production Grade
# ========================================
# Multi-stage build for Parallel AI Coding Orchestrator
# Python FastAPI + Uvicorn
#
# Build: docker build -f Dockerfile.backend -t parallel-coding-backend .
# Run:   docker run -p 8000:8000 parallel-coding-backend
# ========================================

# Stage 1: Base image with dependencies
FROM python:3.13-slim AS base

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    git \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user for security
RUN useradd -m -u 1000 -s /bin/bash appuser

# Set working directory
WORKDIR /app

# Stage 2: Dependencies installation
FROM base AS dependencies

# Copy requirements files
COPY requirements-docker.txt pyproject.toml ./

# Install Python dependencies
RUN pip install --upgrade pip setuptools wheel && \
    pip install -r requirements-docker.txt

# Stage 3: Application build
FROM dependencies AS application

# Copy application code
COPY orchestrator/ ./orchestrator/

# Create necessary directories (including optional ones)
RUN mkdir -p /app/workspace /app/logs /app/config /app/scripts && \
    chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Set entrypoint
ENTRYPOINT ["uvicorn"]

# Default command (production mode with 4 workers)
CMD ["orchestrator.api.main:app", \
     "--host", "0.0.0.0", \
     "--port", "8000", \
     "--workers", "4", \
     "--log-level", "info", \
     "--access-log", \
     "--proxy-headers", \
     "--forwarded-allow-ips", "*"]
